```

pip install opencv-python
import cv2
im = cv2.imread('cats.jpg')

print(type(im))
# <class 'numpy.ndarray'>

print(im.shape)
print(type(im.shape))
h, w, c = im.shape
print('width:  ', w)
print('height: ', h)
print('channel:', c)
# width:   400
# height:  225
# channel: 3
import jax
import jaxlib
import jax.numpy as jnp
import jax.scipy as js
def ln_ill_defined_prior(image: jnp.array) -> jnp.array:
    """
    This is equivalent to optimizing the likelihood function only. i.e. a "uniform over all real number" kind of
    prior, which mathematically does not exist.
    :param image: the image to evaluate the prior on.
    :return:
    """
    return jnp.ones(shape=image.shape)


def ln_some_other_prior(image: jnp.array) -> jnp.array:
    # jsp.stats.norm.logpdf for a Gaussian log PDF?
    # jsp.stats.laplace.logpdf for a Gaussian log PDF?
    # A prior that enforces positive sky value?
    return
A= ln_ill_defined_prior(im)
print(A)
B=ln_some_other_prior(im)
print(B)

```
